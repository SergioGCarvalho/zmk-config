/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

// #define HOST_OS 1



#include "zmk-helpers/helper.h"

// Source desired key-position labels
#include "zmk-helpers/key-labels/lily58.h"

#define DEF 0
#define LOW 1
#define RIS 2

// activate Linux-mode for helper script
#undef OS_UNICODE_LEAD
#undef OS_UNICODE_TRAIL
#define OS_UNICODE_LEAD &macro_tap &kp LS(LC(U))  // <- Linux compose sequence
#define OS_UNICODE_TRAIL &macro_tap &kp SPACE  // <- Space terminates unicode input on Linux

// use helper-script to define linux unicode macros, e.g.,
ZMK_UNICODE_PAIR(lin_c_cedilla,      N0, N0, E, N7,   N0, N0, C, N7)  // ç/Ç
ZMK_UNICODE_PAIR(lin_a_grave,        N0, N0, E, N0,   N0, N0, C, N0)  // à/À
ZMK_UNICODE_PAIR(lin_a_circumflex,   N0, N0, E, N2,   N0, N0, C, N2)  // â/Â
ZMK_UNICODE_PAIR(lin_c_cedilla,      N0, N0, E, N7,   N0, N0, C, N7)  // ç/Ç
ZMK_UNICODE_PAIR(lin_e_grave,        N0, N0, E, N8,   N0, N0, C, N8)  // è/È
ZMK_UNICODE_PAIR(lin_e_acute,        N0, N0, E, N9,   N0, N0, C, N9)  // é/É
ZMK_UNICODE_PAIR(lin_e_circumflex,   N0, N0, E, A,    N0, N0, C, A)   // ê/Ê
ZMK_UNICODE_PAIR(lin_o_circumflex,   N0, N0, F, N4,   N0, N0, D, N4)  // ô/Ô
ZMK_UNICODE_PAIR(lin_oa,             N0, N0,  F, N3,  N0, N0,  D, N3) // ó/Ó
ZMK_UNICODE_PAIR(lin_u_grave,        N0, N0, F, N9,   N0, N0, D, N9)  // ù/Ù
ZMK_UNICODE_PAIR(lin_u_circumflex,   N0, N0, F, B,    N0, N0, D, B)   // û/Û
ZMK_UNICODE_PAIR(lin_a_tilde,        N0, N0, E, N3,   N0, N0,  C, N3) // ã/Ã
ZMK_UNICODE_PAIR(lin_aa,             N0, N0,  E, N1,  N0, N0,  C, N1) // á/Á

// activate macOS-mode for helper script
#undef OS_UNICODE_LEAD
#undef OS_UNICODE_TRAIL
#define OS_UNICODE_LEAD &macro_press &kp LALT  // <- macOS compose sequence (must be activated in system preferences)
#define OS_UNICODE_TRAIL &macro_release &kp LALT  // <- Releasing Left-Alt terminates unicode input on macOns

ZMK_UNICODE_PAIR(mac_a_grave,        N0, N0, E, N0,   N0, N0, C, N0)  // à/À
ZMK_UNICODE_PAIR(mac_a_circumflex,   N0, N0, E, N2,   N0, N0, C, N2)  // â/Â
ZMK_UNICODE_PAIR(mac_c_cedilla,      N0, N0, E, N7,   N0, N0, C, N7)  // ç/Ç
ZMK_UNICODE_PAIR(mac_e_grave,        N0, N0, E, N8,   N0, N0, C, N8)  // è/È
ZMK_UNICODE_PAIR(mac_e_acute,        N0, N0, E, N9,   N0, N0, C, N9)  // é/É
ZMK_UNICODE_PAIR(mac_e_circumflex,   N0, N0, E, A,    N0, N0, C, A)   // ê/Ê
ZMK_UNICODE_PAIR(mac_o_circumflex,   N0, N0, F, N4,   N0, N0, D, N4)  // ô/Ô
ZMK_UNICODE_PAIR(mac_oa,             N0, N0,  F, N3,  N0, N0,  D, N3) // ó/Ó
ZMK_UNICODE_PAIR(mac_u_grave,        N0, N0, F, N9,   N0, N0, D, N9)  // ù/Ù
ZMK_UNICODE_PAIR(mac_u_circumflex,   N0, N0, F, B,    N0, N0, D, B)   // û/Û
ZMK_UNICODE_PAIR(mac_a_tilde,        N0, N0, E, N3,   N0, N0,  C, N3) // ã/Ã
ZMK_UNICODE_PAIR(mac_aa,             N0, N0,  E, N1,  N0, N0,  C, N1) // á/Á

ZMK_TAP_DANCE(c_w_lf,
    tapping-term-ms = <300>;
    bindings = <&kp LSHFT>, <&caps_word>;
)

ZMK_TAP_DANCE(c_c_mac,
    tapping-term-ms = <300>;
    bindings = <&kp C>, <&mac_c_cedilla>;
)

ZMK_TAP_DANCE(c_c_combined,
    tapping-term-ms = <300>;
    bindings = <&kp C>, <&mac_c_cedilla>, <&lin_c_cedilla>;
)

// ZMK_MOD_MORPH(c_c_combined,
//     bindings = <&kp C>, <&mac_c_cedilla>;
//     mods =<MOD_LALT>;
// );

// ZMK_BEHAVIOR(tilde_behavior,
//     compatible = "zmk,behavior-tap";
//     label = "Tilde";
//     bindings = <&mac_a_tilde>;
// )

ZMK_MOD_MORPH(til_N6,
    bindings = <&kp N6>, <&kp TILDE>;
    mods =<MOD_LSFT>;
);

ZMK_MOD_MORPH(lpl_combined,
    bindings = <&kp LPAR>, <&kp LBRC>, <&kp LBKT>;
    mods = <MOD_LSFT>, <MOD_LALT>;
);

ZMK_MOD_MORPH(lpr_combined,
    bindings = <&kp RPAR>, <&kp RBRC>, <&kp RBKT>;
    mods = <MOD_LSFT>, <MOD_LALT>;
);

ZMK_MOD_MORPH(c_w_lff,
    bindings = <&c_w_lf>, <&kp CAPS>;
    mods = <MOD_LALT>;
)

// ZMK_TAP_DANCE(lpl_combo,
//     tapping-term-ms = <300>;
//     bindings = <&lpl_shift>, <&lpl_alt>;
// )

// ZMK_TAP_DANCE(lpr_combo,
//     tapping-term-ms = <300>;
//     bindings = <&lpr_shift>, <&lpr_alt>;
// )

//ZMK_COMBO(caps_lock_combo, &kp CAPS, LH3 LF5)


ZMK_MACRO(lower_layer_macro,
    wait-ms = <100>;
    tap-ms = <5>;
    bindings = <&macro_press &mo 1>,
               <&macro_tap &rgb_ug RGB_COLOR_HSB(128,100,1)>,
               <&macro_release &mo 1>;
)

ZMK_LAYER(default_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &kp ESC       &kp N0        &kp N1        &kp N2        &kp N3        &kp N4                &kp N5        &til_N6        &kp N7        &kp N8        &kp N9        &kp DOT
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp TAB       &kp Q         &kp W         &kp F         &kp P         &kp B                 &kp J         &kp L         &kp U         &kp O         &kp Y         &kp COMMA
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp LCTRL     &kp A         &kp R         &kp S         &kp T         &kp G                 &kp M         &kp N         &kp E         &kp I         &kp UP        &key_repeat
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼───┬───┤───┬─────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &c_w_lff       &kp Z         &kp X         &c_c_combined &kp D         &kp V      &mo 1 &mo 2 &kp K        &kp H         &kp APOS      &kp LEFT      &kp DOWN      &kp RIGHT
    // ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
                                     &kp LALT      &kp LGUI      &kp RET       &kp SPACE             &kp BSPC      &lpl_combined     &lpr_combined         &none
)

ZMK_LAYER(lower_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &kp K_VOL_UP  &kp K_VOL_DN  &kp K_MUTE    &kp C_PP      &kp C_PREV    &kp C_NEXT
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp GRAVE     &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT             &kp CARET     &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR      &kp TILDE
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼───┬───┤───┬─────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &rgb_ug RGB_BRD &rgb_ug RGB_BRI &trans    &trans        &trans        &trans    &trans &trans &kp MINUS   &kp PLUS      &kp LBRC      &kp RBRC      &kp PIPE      &trans
    // ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
                                     &bt BT_CLR    &trans        &kp C_AL_LOCK &trans                &trans        &trans        &trans        &trans
)


ZMK_LAYER(raise_layer,
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮       ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         &trans        &trans        &trans        &trans        &trans        &trans                &trans        &trans        &trans        &trans        &trans        &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp GRAVE     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5                &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤       ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                &trans        &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼───┬───┤───┬─────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12   &trans &trans &kp KP_PLUS &kp MINUS     &kp EQUAL     &kp LBKT      &kp RBKT      &kp BSLH
    // ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯       ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
                                     &trans        &trans        &trans        &trans                &studio_unlock &trans       &trans        &trans
)


 &led_strip {
     chain-length = <29>;
};

&nice_view_spi {
    cs-gpios = <&gpio0 8 GPIO_ACTIVE_HIGH>;
};
